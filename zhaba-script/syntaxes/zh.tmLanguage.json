{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "zhaba script",

  "patterns": [
    {
      "match": "(impl)\\s+([_a-zA-Z0-9]+)",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "entity.name.class"
        }
      }
    },
    {
      "match": "(use)(.*)$",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "string.quoted.triple"
        }
      }
    },
    {
      "match": "(type)\\s+([_a-zA-Z0-9]+)",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "entity.name.class"
        }
      }
    },
    {
      "match": "^\\s*(fn|lop|rop)\\s+([_a-zA-Z0-9]+)((\\s+[_a-zA-Z0-9]+\\s+[_a-zA-Z0-9]+)*)\\s*(\\:|$)",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "entity.name.function"
        },
        "3": {
          "patterns": [
            {
              "include": "#func-arg"
            }
          ]
        }
      }
    },
    {
      "match": "^\\s*(fn|lop|rop)\\s+([_a-zA-Z0-9]+)\\s+([_a-zA-Z0-9]+)((\\s+[_a-zA-Z0-9]+\\s+[_a-zA-Z0-9]+)*)\\s*(\\:|$)",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "entity.name.class"
        },
        "3": {
          "name": "entity.name.function"
        },
        "4": {
          "patterns": [
            {
              "include": "#func-arg"
            }
          ]
        }
      }
    },
    {
      "match": "\\.([_a-zA-Z0-9]+)\\(",
      "captures": {
        "1": {
          "name": "entity.name.function"
        }
      }
    },
    {
      "match": "(\\.)([_a-zA-Z0-9]+)",
      "captures": {
        "1": {
          "name": "keyword.operator.assignment"
        },
        "2": {
          "name": "variable"
        }
      }
    },
    {
      "match": "#'.*",
      "name": "string.other.cpp"
    },
    {
      "begin": "\\/\\*",
      "end": "\\*\\/",
      "name": "comment.block"
    },
    {
      "match": "\\/\\/.*",
      "name": "comment.line"
    },
    {
      "begin": "'",
      "end": "'",
      "name": "string.quoted.single",
      "patterns": [
        {
          "match": "\\\\[\\\\n'\"bnt]",
          "name": "keyword.operator.assignment"
        }
      ]
    },
    {
      "begin": "`",
      "end": "`",
      "name": "string.quoted.raw",
      "patterns": [
        {
          "match": "\\\\`",
          "name": "keyword.operator.assignment"
        }
      ]
    },
    {
      "include": "#type"
    },
    {
      "match": "slf",
      "name": "variable.language"
    },
    {
      "match": "(0x[0-9a-fA-F]+|0b[01]+|[0-9]+)([iu][0-9]*)?|(true|false|tru|fls)",
      "captures": {
        "1": {
          "name": "constant.int"
        },
        "2": {
          "name": "storage.type"
        },
        "3": {
          "name": "constant.bool"
        }
      }
    },
    {
      "match": "[\\.\\,\\+\\-\\*\\\\\\%\\<\\>\\=\\^\\&\\:\\|\\/\\!\\#]+",
      "name": "keyword.operator.assignment"
    },
    {
      "match": "([_a-zA-Z0-9]+)\\(",
      "captures": {
        "1": {
          "name": "entity.name.function"
        },
        "2": {
          "name": "entity.name.function"
        }
      }
    },
    {
      "match": ":=",
      "name": "keyword.operator.assignment"
    },
    {
      "match": "\\:|\\?|\\@|\\\\",
      "name": "keyword.nextblock"
    },
    {
      "match": "([_a-zA-Z0-9]+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "match": "(as|out|put|malloc|free|sizeof)$",
              "name": "keyword.operator.assignment"
            },
            {
              "match": "[_a-zA-Z0-9]+",
              "name": "variable"
            }
          ]
        }
      }
    }
  ],
  "repository": {
    "base-type": {
      "match": "int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64",
      "name": "storage.type"
    },
    "type": {
      "match": "(([A-Z]([_0-9a-z-A-OQ-Z]*)(P+([a-z-A-OQ-Z]+))*)|int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64)(P*)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#base-type"
            },
            {
              "match": ".*",
              "name": "entity.name.class"
            }
          ]
        },
        "6": {
          "name": "keyword.operator.assignment"
        }
      }
    },
    "func-arg": {
      "match": "\\s+([_a-zA-Z0-9]+)\\s+([_a-zA-Z0-9]+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "2": {
          "name": "variable"
        }
      }
    }
  },
  "scopeName": "source.zh"
}
