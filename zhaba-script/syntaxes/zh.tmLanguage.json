{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "zhaba script",

  "patterns": [
    {
      "match": "(impl)\\s+([_a-zA-Z0-9]+)",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "entity.name.class"
        }
      }
    },
    {
      "match": "(use)(.*)$",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "string.quoted.triple"
        }
      }
    },
    {
      "match": "(type)\\s+([_a-zA-Z0-9]+)",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "entity.name.class"
        }
      }
    },

    {
      "match": "^\\s*(fn|lop|rop|op +[0-9]+)\\s+((?:int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|[A-Z][_0-9a-zA-Z]*)(?:<(?: *(?:(?:int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|[A-Z][_0-9a-zA-Z]*)(?:<(?: *(?:(?:int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|[A-Z][_0-9a-zA-Z]*)(?:<(?: *(?:(?:int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|[A-Z][_0-9a-zA-Z]*)(?:<(?: *(?:int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|[A-Z][_0-9a-zA-Z]*) *)*>)?[PR]*) *)*>)?[PR]*) *)*>)?[PR]*) *)*>)?[PR]*) +([^ ]+)",
      "captures": {
        "1": {
          "patterns": [{ "include": "#op-decl" }]
        },
        "2": {
          "patterns": [{ "include": "#type" }]
        },
        "3": {
          "name": "entity.name.function"
        }
      }
    },
    {
      "match": "(fn|lop|rop|op +[0-9]+) +([^ ]*)",
      "captures": {
        "1": {
          "patterns": [{ "include": "#op-decl" }]
        },
        "2": {
          "name": "entity.name.function"
        }
      }
    },
    {
      "match": "\\.([_a-zA-Z0-9]+)\\(",
      "captures": {
        "1": {
          "name": "entity.name.function"
        }
      }
    },
    {
      "match": "(\\.)([_a-zA-Z0-9]+)",
      "captures": {
        "1": {
          "name": "keyword.operator.assignment"
        },
        "2": {
          "name": "variable"
        }
      }
    },
    {
      "match": "#'.*",
      "name": "string.other.cpp"
    },
    {
      "begin": "\\/\\*",
      "end": "\\*\\/",
      "name": "comment.block"
    },
    {
      "match": "\\/\\/.*",
      "name": "comment.line"
    },
    {
      "begin": "'",
      "end": "'",
      "name": "string.quoted.single",
      "patterns": [
        {
          "match": "\\\\[\\\\n'\"bnt]",
          "name": "keyword.operator.assignment"
        }
      ]
    },
    {
      "begin": "`",
      "end": "`",
      "name": "string.quoted.raw",
      "patterns": [
        {
          "match": "\\\\`",
          "name": "keyword.operator.assignment"
        }
      ]
    },
    {
      "include": "#type"
    },
    {
      "match": "slf",
      "name": "variable.language"
    },
    {
      "match": "(0x[0-9a-fA-F]+|0b[01]+|[0-9]+)([iu][0-9]*)?|(true|false|tru|fls)",
      "captures": {
        "1": {
          "name": "constant.int"
        },
        "2": {
          "name": "storage.type"
        },
        "3": {
          "name": "constant.bool"
        }
      }
    },
    {
      "match": "[\\.\\,\\+\\-\\*\\\\\\%\\<\\>\\=\\^\\&\\:\\|\\/\\!\\#]+",
      "name": "keyword.operator.assignment"
    },
    {
      "match": "([_a-zA-Z0-9]+)\\(",
      "captures": {
        "1": {
          "name": "entity.name.function"
        },
        "2": {
          "name": "entity.name.function"
        }
      }
    },
    {
      "match": ":=",
      "name": "keyword.operator.assignment"
    },
    {
      "match": "\\:|\\?|\\@|\\\\",
      "name": "keyword.nextblock"
    },
    {
      "match": "([_a-zA-Z0-9]+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "match": "(as|out|put|malloc|free|sizeof)$",
              "name": "keyword.operator.assignment"
            },
            {
              "match": "[_a-zA-Z0-9]+",
              "name": "variable"
            }
          ]
        }
      }
    }
  ],
  "repository": {
    "op-decl": {
      "match": "([a-z]+) *([0-9]*)",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "constant.int"
        }
      }
    },
    "base-type": {
      "match": "int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64",
      "name": "storage.type"
    },
    "type": {
      "match": "((int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|[A-Z][_0-9a-zA-Z]*)(<( *((int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|[A-Z][_0-9a-zA-Z]*)(<( *((int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|[A-Z][_0-9a-zA-Z]*)(<( *((int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|[A-Z][_0-9a-zA-Z]*)(<( *(int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|[A-Z][_0-9a-zA-Z]*) *)*>)?[PR]*) *)*>)?[PR]*) *)*>)?[PR]*) *)*>)?[PR]*)",
      "captures": {
        "1": {
          "patterns": [
            {
              "match": "int|auto|char|str|bool|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64",
              "name": "storage.type"
            },
            {
              "match": "<",
              "name": "keyword.operator.assignment"
            },
            {
              "match": ">",
              "name": "keyword.operator.assignment"
            },
            {
              "match": "P+R?",
              "name": "keyword.operator.assignment"
            },
            {
              "match": "R",
              "name": "keyword.operator.assignment"
            },
            {
              "match": ".",
              "name": "entity.name.class"
            }
          ]
        }
      }
    },
    "func-arg": {
      "patterns": [
        {
          "include": "#type"
        },
        {
          "match": "[a-zA-Z0-9_]+",
          "name": "variable"
        }
      ]
    }
  },
  "scopeName": "source.zh"
}
